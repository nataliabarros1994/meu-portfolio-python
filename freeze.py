"""
Freeze Script - Gera site est√°tico para GitHub Pages
Converte aplica√ß√£o Flask em HTML/CSS/JS est√°tico

Autor: Nat√°lia Barros
"""

import os
import shutil
from flask_frozen import Freezer
from app_static import app

# Configurar Freezer
app.config['FREEZER_DESTINATION'] = 'docs'
app.config['FREEZER_RELATIVE_URLS'] = True
# N√£o definir FREEZER_BASE_URL para usar URLs relativas que funcionam localmente e no GitHub Pages

freezer = Freezer(app)


# N√£o gerar 404.html via generator - ser√° criado manualmente


def clean_docs():
    """
    Limpa diret√≥rio docs antes de gerar novo build
    """
    if os.path.exists('docs'):
        print("üóëÔ∏è  Limpando diret√≥rio docs...")
        shutil.rmtree('docs')
        print("‚úÖ Diret√≥rio limpo")


def copy_static_files():
    """
    Copia arquivos est√°ticos adicionais
    """
    print("üìÅ Copiando arquivos est√°ticos...")

    # Criar diret√≥rio se n√£o existir
    os.makedirs('docs/static/data', exist_ok=True)

    # Copiar projects.json se existir
    if os.path.exists('static/data/projects.json'):
        shutil.copy('static/data/projects.json', 'docs/static/data/projects.json')
        print("‚úÖ projects.json copiado")

    # Copiar CNAME para GitHub Pages (se existir)
    if os.path.exists('CNAME'):
        shutil.copy('CNAME', 'docs/CNAME')
        print("‚úÖ CNAME copiado")


def create_nojekyll():
    """
    Cria arquivo .nojekyll para desabilitar Jekyll no GitHub Pages
    """
    nojekyll_path = 'docs/.nojekyll'
    with open(nojekyll_path, 'w') as f:
        f.write('')
    print("‚úÖ .nojekyll criado")


def create_404():
    """
    Cria p√°gina 404 para GitHub Pages
    """
    import os
    from flask import Flask
    from app_static import app as flask_app

    print("üìÑ Gerando p√°gina 404...")

    with flask_app.test_client() as client:
        response = client.get('/sobre/')  # Qualquer p√°gina v√°lida
        # Criar 404.html manual
        with open('docs/404.html', 'w', encoding='utf-8') as f:
            f.write('''<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 - P√°gina N√£o Encontrada</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
</head>
<body>
    <div class="container min-vh-100 d-flex align-items-center justify-content-center">
        <div class="text-center">
            <h1 class="display-1 fw-bold text-primary">404</h1>
            <h2 class="mb-3">P√°gina N√£o Encontrada</h2>
            <p class="lead text-muted mb-4">A p√°gina que voc√™ procura n√£o existe.</p>
            <a href="/portfolio-python/" class="btn btn-primary">Voltar ao In√≠cio</a>
        </div>
    </div>
</body>
</html>''')
    print("‚úÖ 404.html criado")


def build():
    """
    Fun√ß√£o principal de build
    """
    print("\n" + "="*60)
    print("‚ùÑÔ∏è  FREEZING FLASK APP ‚Üí STATIC SITE")
    print("="*60 + "\n")

    try:
        # Limpar diret√≥rio docs
        clean_docs()

        # Gerar site est√°tico
        print("üî® Gerando site est√°tico...")
        freezer.freeze()
        print("‚úÖ Site est√°tico gerado em docs/")

        # Copiar arquivos adicionais
        copy_static_files()

        # Criar .nojekyll
        create_nojekyll()

        # Estat√≠sticas
        total_files = sum([len(files) for _, _, files in os.walk('docs')])
        total_size = sum([
            os.path.getsize(os.path.join(root, file))
            for root, _, files in os.walk('docs')
            for file in files
        ])

        print("\n" + "="*60)
        print("‚ú® BUILD EST√ÅTICO CONCLU√çDO!")
        print("="*60)
        print(f"\nüìä Estat√≠sticas:")
        print(f"  ‚Ä¢ Total de arquivos: {total_files}")
        print(f"  ‚Ä¢ Tamanho total: {total_size / 1024:.2f} KB")
        print(f"  ‚Ä¢ Diret√≥rio: docs/")
        print("\n" + "="*60 + "\n")

        print("üí° Pr√≥ximos passos:")
        print("  1. Teste localmente: python -m http.server --directory docs 8000")
        print("  2. Acesse: http://localhost:8000")
        print("  3. Deploy: git add docs/ && git commit -m 'Update site' && git push")
        print("  4. Configure GitHub Pages para usar /docs")
        print("\n")

        return True

    except Exception as e:
        print(f"\n‚ùå Erro durante o build: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == '__main__':
    import sys

    success = build()
    sys.exit(0 if success else 1)
